{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Toby/TodoList/TodoList-App/src/auth.ts"],"sourcesContent":["import NextAuth from 'next-auth';\r\nimport Credentials from 'next-auth/providers/credentials';\r\nimport type { Provider } from 'next-auth/providers/index';\r\n\r\nconst providers: Provider[] = [\r\n    Credentials({\r\n        credentials: {\r\n            email: { label: 'Email Address', type: 'email'},\r\n            password: {label: 'Password', type: 'password'},\r\n        },\r\n        authorize(c) {\r\n            if(c.password !== 'password'){\r\n                return null;\r\n            }\r\n        }\r\n    })\r\n];\r\n\r\nexport const providerMap = providers.map((provider) => {\r\n    return { id: provider.id, name: provider.name };\r\n});\r\n\r\nexport const {handlers , auth, signIn, signOut} = NextAuth({\r\n    providers,\r\n    secret: process.env.AUTH_SECRET,\r\n    pages: {\r\n        signIn: 'auth/signin',\r\n    },\r\n    callbacks: {\r\n        async signIn({ user, account, profile, email, credentials }) {\r\n            // Example: Only allow sign in if password is 'password'\r\n            if (credentials?.password?.toString() !== 'password') {\r\n                return false;\r\n            }\r\n            return true;\r\n        },\r\n        async session({ session, token, user }) {\r\n            // Optionally customize session object here\r\n            return session;\r\n        }\r\n    }\r\n})"],"names":[],"mappings":";;;;;;;AAAA;AACA;;;AAGA,MAAM,YAAwB;IAC1B,CAAA,GAAA,wJAAA,CAAA,UAAW,AAAD,EAAE;QACR,aAAa;YACT,OAAO;gBAAE,OAAO;gBAAiB,MAAM;YAAO;YAC9C,UAAU;gBAAC,OAAO;gBAAY,MAAM;YAAU;QAClD;QACA,WAAU,CAAC;YACP,IAAG,EAAE,QAAQ,KAAK,YAAW;gBACzB,OAAO;YACX;QACJ;IACJ;CACH;AAEM,MAAM,cAAc,UAAU,GAAG,CAAC,CAAC;IACtC,OAAO;QAAE,IAAI,SAAS,EAAE;QAAE,MAAM,SAAS,IAAI;IAAC;AAClD;AAEO,MAAM,EAAC,QAAQ,EAAG,IAAI,EAAE,MAAM,EAAE,OAAO,EAAC,GAAG,CAAA,GAAA,qIAAA,CAAA,UAAQ,AAAD,EAAE;IACvD;IACA,QAAQ,QAAQ,GAAG,CAAC,WAAW;IAC/B,OAAO;QACH,QAAQ;IACZ;IACA,WAAW;QACP,MAAM,QAAO,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE;YACvD,wDAAwD;YACxD,IAAI,aAAa,UAAU,eAAe,YAAY;gBAClD,OAAO;YACX;YACA,OAAO;QACX;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE;YAClC,2CAA2C;YAC3C,OAAO;QACX;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 173, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Toby/TodoList/TodoList-App/src/app/auth/signin/page.tsx"],"sourcesContent":["import { AuthProvider, SignInPage } from '@toolpad/core';\r\nimport { providerMap, signIn } from 'auth';\r\n\r\nexport default function SignIn() {\r\n    return (\r\n        <SignInPage\r\n            providers={providerMap}\r\n            signIn={async (provider: AuthProvider, formData: FormData, callbackUrl?: string) => {\r\n                'use server';\r\n                try {\r\n                    return await signIn(provider.id, {\r\n                        ...(formData && {email: formData.get('email'), password: formData.get('password')}),\r\n                        redirect: callbackUrl ?? '/'\r\n                    })\r\n                } catch (e){\r\n                    if(e instanceof Error && e.message === \"NEXT_REDIRECT\"){\r\n                        throw e\r\n                    }\r\n                }\r\n            }}\r\n        >\r\n        </SignInPage>\r\n    )\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAEe,SAAS;IACpB,qBACI,8OAAC,oKAAA,CAAA,aAAU;QACP,WAAW,2GAAA,CAAA,cAAW;QACtB,QAAQ,OAAO,UAAwB,UAAoB;YACvD;YACA,IAAI;gBACA,OAAO,MAAM,CAAA,GAAA,2GAAA,CAAA,SAAM,AAAD,EAAE,SAAS,EAAE,EAAE;oBAC7B,GAAI,YAAY;wBAAC,OAAO,SAAS,GAAG,CAAC;wBAAU,UAAU,SAAS,GAAG,CAAC;oBAAW,CAAC;oBAClF,UAAU,eAAe;gBAC7B;YACJ,EAAE,OAAO,GAAE;gBACP,IAAG,aAAa,SAAS,EAAE,OAAO,KAAK,iBAAgB;oBACnD,MAAM;gBACV;YACJ;QACJ;;;;;;AAIZ","debugId":null}},
    {"offset": {"line": 213, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Toby/TodoList/TodoList-App/src/app/page.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { QueryClientProvider, QueryClient } from \"@tanstack/react-query\";\r\nimport { ReactQueryDevtools } from \"@tanstack/react-query-devtools\";\r\n\r\nimport { Suspense } from \"react\";\r\nimport Providers from \"./provider/provider\";\r\nimport TodoPage from \"./components/TodoPage\";\r\nimport SignIn from \"./auth/signin/page\";\r\n\r\nconst queryClient = new QueryClient();\r\n\r\nexport default function App() {\r\n  return (\r\n    <Providers>\r\n      <QueryClientProvider client={queryClient}>\r\n        <Suspense fallback={<div>Loading...</div>}>\r\n          <SignIn />\r\n        </Suspense>\r\n        <ReactQueryDevtools initialIsOpen={false} />\r\n      </QueryClientProvider>\r\n    </Providers>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AARA;;;;;;;AAUA,MAAM,cAAc,IAAI,6KAAA,CAAA,cAAW;AAEpB,SAAS;IACtB,qBACE,8OAAC,mIAAA,CAAA,UAAS;kBACR,cAAA,8OAAC,sLAAA,CAAA,sBAAmB;YAAC,QAAQ;;8BAC3B,8OAAC,qMAAA,CAAA,WAAQ;oBAAC,wBAAU,8OAAC;kCAAI;;;;;;8BACvB,cAAA,8OAAC,qIAAA,CAAA,UAAM;;;;;;;;;;8BAET,8OAAC,oLAAA,CAAA,qBAAkB;oBAAC,eAAe;;;;;;;;;;;;;;;;;AAI3C","debugId":null}}]
}