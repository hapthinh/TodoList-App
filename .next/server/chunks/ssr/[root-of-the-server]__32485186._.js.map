{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Toby/TodoList/TodoList-App/src/auth.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\r\nimport Credentials from \"next-auth/providers/credentials\";\r\nimport type { Provider } from \"next-auth/providers/index\";\r\n\r\nconst providers: Provider[] = [\r\n  Credentials({\r\n    credentials: {\r\n      email: { label: \"Email Address\", type: \"email\" },\r\n      password: { label: \"Password\", type: \"password\" },\r\n    },\r\n    authorize(c) {\r\n      if (c.password !== \"password\") {\r\n        return null;\r\n      }\r\n    },\r\n  }),\r\n];\r\n\r\nexport const providerMap = providers.map((provider) => {\r\n  return { id: provider.id, name: provider.name };\r\n});\r\n\r\nexport const { handlers, signIn, signOut } = NextAuth({\r\n  providers,\r\n  secret: process.env.AUTH_SECRET,\r\n  pages: {\r\n    signIn: \"auth/signin\",\r\n  },\r\n  callbacks: {\r\n    async signIn({ user, account, profile, email, credentials }) {\r\n      if (credentials?.password?.toString() !== \"password\") {\r\n        return false;\r\n      }\r\n      return true;\r\n    },\r\n    async session({ session }) {\r\n      return session;\r\n    },\r\n  },\r\n});\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAGA,MAAM,YAAwB;IAC5B,CAAA,GAAA,wJAAA,CAAA,UAAW,AAAD,EAAE;QACV,aAAa;YACX,OAAO;gBAAE,OAAO;gBAAiB,MAAM;YAAQ;YAC/C,UAAU;gBAAE,OAAO;gBAAY,MAAM;YAAW;QAClD;QACA,WAAU,CAAC;YACT,IAAI,EAAE,QAAQ,KAAK,YAAY;gBAC7B,OAAO;YACT;QACF;IACF;CACD;AAEM,MAAM,cAAc,UAAU,GAAG,CAAC,CAAC;IACxC,OAAO;QAAE,IAAI,SAAS,EAAE;QAAE,MAAM,SAAS,IAAI;IAAC;AAChD;AAEO,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,qIAAA,CAAA,UAAQ,AAAD,EAAE;IACpD;IACA,QAAQ,QAAQ,GAAG,CAAC,WAAW;IAC/B,OAAO;QACL,QAAQ;IACV;IACA,WAAW;QACT,MAAM,QAAO,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE;YACzD,IAAI,aAAa,UAAU,eAAe,YAAY;gBACpD,OAAO;YACT;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE;YACvB,OAAO;QACT;IACF;AACF","debugId":null}},
    {"offset": {"line": 155, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Toby/TodoList/TodoList-App/src/app/auth/signin/page.tsx"],"sourcesContent":["import { SignInPage } from \"@toolpad/core\";\r\nimport { providerMap } from \"auth\";\r\nimport type { AuthProvider, AuthResponse } from \"@toolpad/core\";\r\n\r\n/*\r\nconst handleSignIn = async (\r\n    provider: AuthProvider,\r\n    formData?: FormData,\r\n    callbackUrl?: string\r\n  ): Promise<AuthResponse> => {\r\n    return signIn(provider.id, {\r\n      email: formData?.get(\"email\"),\r\n      password: formData?.get(\"password\"),\r\n      callbackUrl,\r\n      redirect: true,\r\n    });\r\n  };\r\n\r\nexport default function SignIn() {\r\n  return <SignInPage providers={providerMap} signIn={handleSignIn} />;\r\n}\r\n  */\r\n\r\nconst signIn: (\r\n  provider: AuthProvider,\r\n  formData? : FormData,\r\n) => Promise<AuthResponse> | void = async (provider, formData) => {\r\n  const promise = new Promise<AuthResponse>((resolve) => {\r\n    setTimeout(() => {\r\n      const email = formData?.get('email');\r\n      const password = formData?.get('password');\r\n      alert(\r\n        `sign in with ${provider.name}`\r\n      );\r\n      resolve({\r\n        type: 'CredentialsSignin',\r\n        error: 'Invalid credentials'\r\n      })\r\n    }, 3000)\r\n  })\r\n  return promise;\r\n}\r\n\r\nexport default function SignIn(){\r\n  return (\r\n    <SignInPage signIn={signIn} providers={providerMap}></SignInPage>\r\n  )\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAGA;;;;;;;;;;;;;;;;;EAiBE,GAEF,MAAM,SAG8B,OAAO,UAAU;IACnD,MAAM,UAAU,IAAI,QAAsB,CAAC;QACzC,WAAW;YACT,MAAM,QAAQ,UAAU,IAAI;YAC5B,MAAM,WAAW,UAAU,IAAI;YAC/B,MACE,CAAC,aAAa,EAAE,SAAS,IAAI,EAAE;YAEjC,QAAQ;gBACN,MAAM;gBACN,OAAO;YACT;QACF,GAAG;IACL;IACA,OAAO;AACT;AAEe,SAAS;IACtB,qBACE,8OAAC,kKAAA,CAAA,aAAU;QAAC,QAAQ;QAAQ,WAAW,2GAAA,CAAA,cAAW;;;;;;AAEtD","debugId":null}}]
}