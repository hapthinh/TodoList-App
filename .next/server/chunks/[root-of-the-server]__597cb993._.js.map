{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Toby/TodoList/TodoList-App/src/app/db/index.ts"],"sourcesContent":["import { drizzle } from \"drizzle-orm/node-postgres\";\r\nimport { Pool } from \"pg\";\r\n\r\nconst pool = new Pool({\r\n  connectionString:\r\n    process.env.DATABASE_URL ||\r\n    \"postgres://postgres:root@localhost:5432/todolist_db\",\r\n});\r\n\r\nexport const db = drizzle(pool);\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;;;;;;AAEA,MAAM,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAC;IACpB,kBACE,QAAQ,GAAG,CAAC,YAAY,IACxB;AACJ;AAEO,MAAM,KAAK,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 93, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Toby/TodoList/TodoList-App/src/app/db/schema.ts"],"sourcesContent":["import { serial, text, boolean, pgTable } from \"drizzle-orm/pg-core\";\r\n\r\n// Table Todo\r\nexport const todos = pgTable(\"todo\", {\r\n  id: serial(\"id\").primaryKey(),\r\n  todo: text(\"todo\"),\r\n  completed: boolean(\"completed\").default(false),\r\n  createdDate: text(\"createdDate\"),\r\n});\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AAAA;AAAA;;AAGO,MAAM,QAAQ,CAAA,GAAA,uJAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;IACnC,IAAI,CAAA,GAAA,mKAAA,CAAA,SAAM,AAAD,EAAE,MAAM,UAAU;IAC3B,MAAM,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE;IACX,WAAW,CAAA,GAAA,oKAAA,CAAA,UAAO,AAAD,EAAE,aAAa,OAAO,CAAC;IACxC,aAAa,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE;AACpB","debugId":null}},
    {"offset": {"line": 113, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Toby/TodoList/TodoList-App/src/app/api/todolist/%5Bid%5D/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { eq } from \"drizzle-orm\";\r\n\r\nimport { db } from \"app/db\";\r\nimport { todos } from \"app/db/schema\";\r\n\r\n\r\n// Delete todo by id\r\nexport async function DELETE(request: Request) {\r\n  const url = new URL(request.url);\r\n  const id = Number(url.pathname.split(\"/\").pop());\r\n  console.log(id);\r\n\r\n  const result = await db.delete(todos).where(eq(todos.id, id)).returning()\r\n\r\n  return NextResponse.json(result[0])\r\n}\r\n\r\n// Update Todo status or content by id\r\nexport async function PATCH(request: Request) {\r\n  const url = new URL(request.url);\r\n  const id = Number(url.pathname.split(\"/\").pop());\r\n  const body = await request.json();\r\n  const updateData : any = {}\r\n\r\n  if(typeof body.todo !== \"undefined\") updateData.todo = body.todo\r\n  if(typeof body.completed !== \"undefined\") updateData.completed = body.completed\r\n\r\n  const result = await db.update(todos).set(updateData).where(eq(todos.id, id)).returning()\r\n  \r\n  return NextResponse.json(result[0])\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AAEA;AACA;;;;;;;;;AAIO,eAAe,OAAO,OAAgB;IAC3C,MAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;IAC/B,MAAM,KAAK,OAAO,IAAI,QAAQ,CAAC,KAAK,CAAC,KAAK,GAAG;IAC7C,QAAQ,GAAG,CAAC;IAEZ,MAAM,SAAS,MAAM,2HAAA,CAAA,KAAE,CAAC,MAAM,CAAC,4HAAA,CAAA,QAAK,EAAE,KAAK,CAAC,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,4HAAA,CAAA,QAAK,CAAC,EAAE,EAAE,KAAK,SAAS;IAEvE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;AACpC;AAGO,eAAe,MAAM,OAAgB;IAC1C,MAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;IAC/B,MAAM,KAAK,OAAO,IAAI,QAAQ,CAAC,KAAK,CAAC,KAAK,GAAG;IAC7C,MAAM,OAAO,MAAM,QAAQ,IAAI;IAC/B,MAAM,aAAmB,CAAC;IAE1B,IAAG,OAAO,KAAK,IAAI,KAAK,aAAa,WAAW,IAAI,GAAG,KAAK,IAAI;IAChE,IAAG,OAAO,KAAK,SAAS,KAAK,aAAa,WAAW,SAAS,GAAG,KAAK,SAAS;IAE/E,MAAM,SAAS,MAAM,2HAAA,CAAA,KAAE,CAAC,MAAM,CAAC,4HAAA,CAAA,QAAK,EAAE,GAAG,CAAC,YAAY,KAAK,CAAC,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,4HAAA,CAAA,QAAK,CAAC,EAAE,EAAE,KAAK,SAAS;IAEvF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;AACpC","debugId":null}}]
}