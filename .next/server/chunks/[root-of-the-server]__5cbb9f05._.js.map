{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":["file:///E:/frontendApp/frontendApp/src/app/db/index.ts"],"sourcesContent":["import { drizzle } from \"drizzle-orm/node-postgres\";\r\nimport { Pool } from \"pg\";\r\n\r\nconst pool = new Pool({\r\n  connectionString:\r\n    process.env.DATABASE_URL ||\r\n    \"postgres://postgres:root@localhost:5432/todolist_db\",\r\n\r\n});\r\n\r\nexport const db = drizzle(pool);\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;;;;;;AAEA,MAAM,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAC;IACpB,kBACE,QAAQ,GAAG,CAAC,YAAY,IACxB;AAEJ;AAEO,MAAM,KAAK,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 173, "column": 0}, "map": {"version":3,"sources":["file:///E:/frontendApp/frontendApp/src/app/db/schema.ts"],"sourcesContent":["import { relations } from \"drizzle-orm\";\r\nimport {\r\n  serial,\r\n  text,\r\n  boolean,\r\n  pgTable,\r\n  timestamp,\r\n  integer,\r\n} from \"drizzle-orm/pg-core\";\r\n\r\n// Table Todo\r\nexport const todos = pgTable(\"todo\", {\r\n  id: serial(\"id\").primaryKey(),\r\n  todo: text(\"todo\"),\r\n  completed: boolean(\"completed\").default(false),\r\n  createdDate: text(\"createdDate\"),\r\n  userId: integer(\"user_id\")\r\n    .notNull()\r\n    .references(() => users.id),\r\n});\r\n\r\n// Table user\r\nexport const users = pgTable(\"user\", {\r\n  id: serial(\"id\").primaryKey(),\r\n  name: text(\"name\").notNull(),\r\n  email: text(\"email\").notNull(),\r\n  password : text('password').notNull(),\r\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\r\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\r\n});\r\n\r\n// todo 1-1 or n-1 user\r\nexport const todoRelations = relations(todos, ({ one }) => ({\r\n  users: one(users, { fields: [todos.userId], references: [users.id] }),\r\n}));\r\n\r\n// user 1-n todo\r\nexport const userRelations = relations(users, ({ many }) => ({\r\n  todos: many(todos),\r\n}));\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAUO,MAAM,QAAQ,CAAA,GAAA,uJAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;IACnC,IAAI,CAAA,GAAA,mKAAA,CAAA,SAAM,AAAD,EAAE,MAAM,UAAU;IAC3B,MAAM,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE;IACX,WAAW,CAAA,GAAA,oKAAA,CAAA,UAAO,AAAD,EAAE,aAAa,OAAO,CAAC;IACxC,aAAa,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE;IAClB,QAAQ,CAAA,GAAA,oKAAA,CAAA,UAAO,AAAD,EAAE,WACb,OAAO,GACP,UAAU,CAAC,IAAM,MAAM,EAAE;AAC9B;AAGO,MAAM,QAAQ,CAAA,GAAA,uJAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;IACnC,IAAI,CAAA,GAAA,mKAAA,CAAA,SAAM,AAAD,EAAE,MAAM,UAAU;IAC3B,MAAM,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,OAAO;IAC1B,OAAO,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,SAAS,OAAO;IAC5B,UAAW,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,YAAY,OAAO;IACnC,WAAW,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,cAAc,OAAO,GAAG,UAAU;IACvD,WAAW,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,cAAc,OAAO,GAAG,UAAU;AACzD;AAGO,MAAM,gBAAgB,CAAA,GAAA,6IAAA,CAAA,YAAS,AAAD,EAAE,OAAO,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QAC1D,OAAO,IAAI,OAAO;YAAE,QAAQ;gBAAC,MAAM,MAAM;aAAC;YAAE,YAAY;gBAAC,MAAM,EAAE;aAAC;QAAC;IACrE,CAAC;AAGM,MAAM,gBAAgB,CAAA,GAAA,6IAAA,CAAA,YAAS,AAAD,EAAE,OAAO,CAAC,EAAE,IAAI,EAAE,GAAK,CAAC;QAC3D,OAAO,KAAK;IACd,CAAC","debugId":null}},
    {"offset": {"line": 222, "column": 0}, "map": {"version":3,"sources":["file:///E:/frontendApp/frontendApp/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import { eq } from \"drizzle-orm\";\r\nimport NextAuth, { NextAuthOptions } from \"next-auth\";\r\nimport Credentials from \"next-auth/providers/credentials\";\r\n\r\nimport { db } from \"app/db\";\r\nimport { users } from \"app/db/schema\";\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n  providers: [\r\n    Credentials({\r\n      id: \"credentials\",\r\n      name: \"credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"email\" },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n      async authorize(credentials) {\r\n        const usersFound = await db\r\n          .select()\r\n          .from(users)\r\n          .where(eq(users.email, credentials.email));\r\n        const user = usersFound[0];\r\n        if (user) {\r\n          if (credentials.password === user.password)\r\n            return { id: String(user.id), email: user.email };\r\n        }\r\n        return null;\r\n      },\r\n    }),\r\n  ],\r\n  secret: process.env.AUTH_SECRET,\r\n  pages: {\r\n    signIn: \"/auth/signin\",\r\n    signOut: \"/auth/signout\",\r\n  },\r\n  session: {\r\n    strategy: \"jwt\",\r\n  },\r\n  callbacks: {\r\n    async session({ session, token }) {\r\n      if (session?.user) {\r\n        session.user.id = token.sub;\r\n      }\r\n      return session;\r\n    },\r\n  },\r\n};\r\n\r\nconst handler = NextAuth(authOptions);\r\n\r\nexport { handler as GET, handler as POST };\r\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;AACA;;;;;;;;;;AAEO,MAAM,cAA+B;IAC1C,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAW,AAAD,EAAE;YACV,IAAI;YACJ,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,MAAM,aAAa,MAAM,2HAAA,CAAA,KAAE,CACxB,MAAM,GACN,IAAI,CAAC,4HAAA,CAAA,QAAK,EACV,KAAK,CAAC,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,4HAAA,CAAA,QAAK,CAAC,KAAK,EAAE,YAAY,KAAK;gBAC1C,MAAM,OAAO,UAAU,CAAC,EAAE;gBAC1B,IAAI,MAAM;oBACR,IAAI,YAAY,QAAQ,KAAK,KAAK,QAAQ,EACxC,OAAO;wBAAE,IAAI,OAAO,KAAK,EAAE;wBAAG,OAAO,KAAK,KAAK;oBAAC;gBACpD;gBACA,OAAO;YACT;QACF;KACD;IACD,QAAQ,QAAQ,GAAG,CAAC,WAAW;IAC/B,OAAO;QACL,QAAQ;QACR,SAAS;IACX;IACA,SAAS;QACP,UAAU;IACZ;IACA,WAAW;QACT,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,SAAS,MAAM;gBACjB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,GAAG;YAC7B;YACA,OAAO;QACT;IACF;AACF;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE","debugId":null}}]
}