{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Toby/TodoList/TodoList-App/src/app/db/schema.ts"],"sourcesContent":["import { relations } from \"drizzle-orm\";\r\nimport {\r\n  serial,\r\n  text,\r\n  boolean,\r\n  pgTable,\r\n  timestamp,\r\n  integer,\r\n} from \"drizzle-orm/pg-core\";\r\n\r\n// Table Todo\r\nexport const todos = pgTable(\"todo\", {\r\n  id: serial(\"id\").primaryKey(),\r\n  todo: text(\"todo\"),\r\n  completed: boolean(\"completed\").default(false),\r\n  createdDate: text(\"createdDate\"),\r\n  userId: integer(\"user_id\")\r\n    .notNull()\r\n    .references(() => users.id),\r\n});\r\n\r\n// Table user\r\nexport const users = pgTable(\"user\", {\r\n  id: serial(\"id\").primaryKey(),\r\n  name: text(\"name\").notNull(),\r\n  email: text(\"email\").notNull(),\r\n  password : text('password').notNull(),\r\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\r\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\r\n});\r\n\r\n// todo 1-1 or n-1 user\r\nexport const todoRelations = relations(todos, ({ one }) => ({\r\n  users: one(users, { fields: [todos.userId], references: [users.id] }),\r\n}));\r\n\r\n// user 1-n todo\r\nexport const userRelations = relations(users, ({ many }) => ({\r\n  todos: many(todos),\r\n}));\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAUO,MAAM,QAAQ,CAAA,GAAA,uJAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;IACnC,IAAI,CAAA,GAAA,mKAAA,CAAA,SAAM,AAAD,EAAE,MAAM,UAAU;IAC3B,MAAM,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE;IACX,WAAW,CAAA,GAAA,oKAAA,CAAA,UAAO,AAAD,EAAE,aAAa,OAAO,CAAC;IACxC,aAAa,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE;IAClB,QAAQ,CAAA,GAAA,oKAAA,CAAA,UAAO,AAAD,EAAE,WACb,OAAO,GACP,UAAU,CAAC,IAAM,MAAM,EAAE;AAC9B;AAGO,MAAM,QAAQ,CAAA,GAAA,uJAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;IACnC,IAAI,CAAA,GAAA,mKAAA,CAAA,SAAM,AAAD,EAAE,MAAM,UAAU;IAC3B,MAAM,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,OAAO;IAC1B,OAAO,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,SAAS,OAAO;IAC5B,UAAW,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,YAAY,OAAO;IACnC,WAAW,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,cAAc,OAAO,GAAG,UAAU;IACvD,WAAW,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,cAAc,OAAO,GAAG,UAAU;AACzD;AAGO,MAAM,gBAAgB,CAAA,GAAA,6IAAA,CAAA,YAAS,AAAD,EAAE,OAAO,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QAC1D,OAAO,IAAI,OAAO;YAAE,QAAQ;gBAAC,MAAM,MAAM;aAAC;YAAE,YAAY;gBAAC,MAAM,EAAE;aAAC;QAAC;IACrE,CAAC;AAGM,MAAM,gBAAgB,CAAA,GAAA,6IAAA,CAAA,YAAS,AAAD,EAAE,OAAO,CAAC,EAAE,IAAI,EAAE,GAAK,CAAC;QAC3D,OAAO,KAAK;IACd,CAAC","debugId":null}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Toby/TodoList/TodoList-App/src/app/db/index.ts"],"sourcesContent":["import { drizzle } from \"drizzle-orm/node-postgres\";\r\nimport { Pool } from \"pg\";\r\n\r\nconst pool = new Pool({\r\n  connectionString:\r\n    process.env.DATABASE_URL ||\r\n    \"postgres://postgres:root@localhost:5432/todolist_db\",\r\n\r\n});\r\n\r\nexport const db = drizzle(pool);\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;;;;;;AAEA,MAAM,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAC;IACpB,kBACE,QAAQ,GAAG,CAAC,YAAY,IACxB;AAEJ;AAEO,MAAM,KAAK,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Toby/TodoList/TodoList-App/src/app/services/todoServices.ts"],"sourcesContent":["// Share services\r\n\r\nimport { db } from \"app/db\";\r\nimport { todos } from \"app/db/schema\";\r\nimport { count, eq } from \"drizzle-orm\";\r\n\r\nexport async function deleteTodoById(id: number) {\r\n  return db.delete(todos).where(eq(todos.id, id)).returning();\r\n}\r\n\r\nexport const getTodoById = db.select().from(todos).where(eq(todos.id, 17));\r\n\r\nexport async function statistic(completed: boolean) {\r\n  const result = await db\r\n    .select({ count: count(todos.completed) })\r\n    .from(todos)\r\n    .where(eq(todos.completed, completed));\r\n  return Number(result[0].count ?? 0);\r\n}\r\n"],"names":[],"mappings":"AAAA,iBAAiB;;;;;;AAEjB;AACA;AACA;AAAA;;;;;;;;AAEO,eAAe,eAAe,EAAU;IAC7C,OAAO,2HAAA,CAAA,KAAE,CAAC,MAAM,CAAC,4HAAA,CAAA,QAAK,EAAE,KAAK,CAAC,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,4HAAA,CAAA,QAAK,CAAC,EAAE,EAAE,KAAK,SAAS;AAC3D;AAEO,MAAM,cAAc,2HAAA,CAAA,KAAE,CAAC,MAAM,GAAG,IAAI,CAAC,4HAAA,CAAA,QAAK,EAAE,KAAK,CAAC,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,4HAAA,CAAA,QAAK,CAAC,EAAE,EAAE;AAE/D,eAAe,UAAU,SAAkB;IAChD,MAAM,SAAS,MAAM,2HAAA,CAAA,KAAE,CACpB,MAAM,CAAC;QAAE,OAAO,CAAA,GAAA,iKAAA,CAAA,QAAK,AAAD,EAAE,4HAAA,CAAA,QAAK,CAAC,SAAS;IAAE,GACvC,IAAI,CAAC,4HAAA,CAAA,QAAK,EACV,KAAK,CAAC,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,4HAAA,CAAA,QAAK,CAAC,SAAS,EAAE;IAC7B,OAAO,OAAO,MAAM,CAAC,EAAE,CAAC,KAAK,IAAI;AACnC","debugId":null}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Toby/TodoList/TodoList-App/src/app/api/todolist/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { ilike, eq, and, asc, desc, sql, inArray } from \"drizzle-orm\";\r\n\r\nimport { todos } from \"app/db/schema\";\r\nimport { db } from \"app/db\";\r\nimport { statistic } from \"app/services/todoServices\";\r\nimport { Todo, Todos } from \"app/type/type\";\r\nimport { error } from \"console\";\r\n\r\nexport async function GET(request: Request) {\r\n  const { searchParams } = new URL(request.url);\r\n\r\n  // get params\r\n  const kw = searchParams.get(\"kw\") || \"\";\r\n  const status = searchParams.get(\"status\") || \"\";\r\n  const page = parseInt(searchParams.get(\"page\") || \"1\", 10);\r\n  const limit = parseInt(searchParams.get(\"limit\") || \"10\", 10);\r\n  const order = searchParams.get(\"order\") || \"\";\r\n  const sortField = searchParams.get(\"sortField\") || \"id\";\r\n  const whereClaus = [];\r\n\r\n  // if have kw or status => push \r\n  if (kw) whereClaus.push(ilike(todos.todo, `%${kw}%`));\r\n  if (status) whereClaus.push(eq(todos.completed, status === \"true\"));\r\n\r\n  // valid field for sort\r\n  const validSortField = {\r\n    id: todos.id,\r\n    todo: todos.todo,\r\n    createdDate: todos.createdDate,\r\n    status: todos.completed,\r\n  };\r\n\r\n  // select * from todos where .. order sortField asc/desc\r\n  const result = await db\r\n    .select()\r\n    .from(todos)\r\n    .where(whereClaus.length ? and(...whereClaus) : undefined)\r\n    .orderBy(\r\n      order === \"asc\"\r\n        ? asc(validSortField[sortField])\r\n        : desc(validSortField[sortField])\r\n    );\r\n\r\n  // statistic\r\n  const completedCount = await statistic(true);\r\n  const unCompletedCount = await statistic(false);\r\n\r\n  // pagination\r\n  const total = result.length;\r\n  const start = (page - 1) * limit;\r\n  const end = start + limit;\r\n  const pageTodos = result.slice(start, end);\r\n\r\n  return NextResponse.json({\r\n    todos: pageTodos,\r\n    total,\r\n    page,\r\n    limit,\r\n    unCompletedCount,\r\n    completedCount,\r\n  });\r\n}\r\n\r\nexport async function POST(request: Request) {\r\n  const body = await request.json();\r\n  console.log(body);\r\n\r\n  // Insert todo Values(...)\r\n  const result = await db\r\n    .insert(todos)\r\n    .values({\r\n      userId: 1,\r\n      todo: body.todo,\r\n      completed: false,\r\n      createdDate: new Date().toISOString(),\r\n    })\r\n    .returning();\r\n\r\n  return NextResponse.json(result[0]);\r\n}\r\n\r\n// Delete multi todo\r\nexport async function DELETE(request: Request) {\r\n  \r\n  // get arr id from body request\r\n  const arr = await request.json()\r\n\r\n  // todo.id = arr[...]\r\n  const result = await db.delete(todos).where(inArray(todos.id,arr)).returning();\r\n\r\n  return NextResponse.json(result)\r\n}\r\n\r\n\r\n"],"names":[],"mappings":"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","debugId":null}}]
}