{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///E:/frontendApp/frontendApp/src/app/api/todolist/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { promises as fs } from \"fs\";\r\nimport path from \"path\";\r\n\r\nimport { Todo, Todos } from \"app/data/type\";\r\n\r\n// Path file json -> app/json/todolist.json\r\nconst file = path.join(process.cwd() + \"/src/app/json/todolist.json\");\r\n\r\n// Get all todos or todo by keyword or tody by completed\r\nexport async function GET(request: Request) {\r\n  const { searchParams } = new URL(request.url);\r\n\r\n  // Get params\r\n  const keyword = searchParams.get(\"kw\") || \"\";\r\n  const status = searchParams.get(\"status\") || \"\";\r\n  const page = parseInt(searchParams.get(\"page\") || \"1\", 10);\r\n  const limit = parseInt(searchParams.get(\"limit\") || \"10\", 10);\r\n  const order = searchParams.get(\"order\") || \"\";\r\n  const sortField = searchParams.get(\"sortField\") || \"todo\";\r\n\r\n  // Read file\r\n  const raw = await fs.readFile(file, \"utf-8\");\r\n  const data = JSON.parse(raw) as Todos;\r\n\r\n  let todos = [...data.todos];\r\n\r\n  // Filter by keyword\r\n  if (keyword) {\r\n    todos = todos.filter((todo: Todo) =>\r\n      String(todo.todo).toLowerCase().includes(keyword.toLowerCase())\r\n    );\r\n  }\r\n\r\n  // Filter by status\r\n  if (status) {\r\n    todos = todos.filter((todo: Todo) => String(todo.status) === status);\r\n  }\r\n\r\n  // Sort by field\r\n  if (sortField === \"todo\") {\r\n    todos.sort((a: Todo, b: Todo) =>\r\n      order === \"asc\"\r\n        ? a.todo.localeCompare(b.todo) // if asc => a vs b else desc => b vs a\r\n        : b.todo.localeCompare(a.todo)\r\n    );\r\n  } else if (sortField === \"createdDate\") {\r\n    todos.sort((a: Todo, b: Todo) => {\r\n      const dateA = new Date(a.createdDate).getTime();\r\n      const dateB = new Date(b.createdDate).getTime(); \r\n      return order === \"asc\" ? dateA - dateB : dateB - dateA;\r\n    });\r\n  }\r\n\r\n  // Pagination\r\n  const total = todos.length;\r\n  const start = (page - 1) * limit;\r\n  const end = start + limit;\r\n  const pageTodos = todos.slice(start, end);\r\n\r\n  return NextResponse.json({\r\n    todos: pageTodos,\r\n    total,\r\n    page,\r\n    limit,\r\n  });\r\n}\r\n\r\n// Post new Todo\r\nexport async function POST(request: Request) {\r\n  const raw = await fs.readFile(file, \"utf-8\");\r\n  const body = await request.json();\r\n  const data = JSON.parse(raw);\r\n  const newTodo = {\r\n    ...body,\r\n    status: false,\r\n    createdDate: new Date().toISOString(),\r\n  };\r\n\r\n  data.todos.push(newTodo);\r\n\r\n  await fs.writeFile(file, JSON.stringify(data, null, 2), \"utf-8\");\r\n\r\n  return NextResponse.json(newTodo);\r\n}\r\n\r\n// Delete Todo by Id\r\nexport async function DELETE(request: Request) {\r\n  const raw = await fs.readFile(file, \"utf-8\");\r\n  const body = await request.json();\r\n  const data = JSON.parse(raw);\r\n  const id = body.id;\r\n\r\n  data.todos = data.todos.filter((todo: Todo) => todo.id !== id);\r\n\r\n  await fs.writeFile(file, JSON.stringify(data, null, 2), \"utf-8\");\r\n\r\n  return NextResponse.json({ success: true });\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}